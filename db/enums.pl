use strict;
use warnings;

OPTIONAL STRINGIFY ENUM ARM_ARCH_VARIANT  => qw/NONE ARMv8 ARMv8v1 ARMv8v2 ARMv8v3 ARMv8v4 ARMv8v5 ARMv8v6/;
OPTIONAL STRINGIFY ENUM ISA           => qw/NONE ARM THUMB/;
OPTIONAL STRINGIFY ENUM ISAFORM       => qw/NONE T16 T32 A32 A64/;

STRINGIFY ENUM ARM_CONDITION    => qw/NONE EQ NE CS CC MI PL VS VC HI LS GE LT GT LE AL NV HS LO/;

STRINGIFY ENUM SHIFT   => qw/NONE ASR LSL LSR MSL ROR RRX MUL SXTB SXTH SXTW SXTX UXTB UXTH UXTW UXTX /;

STRINGIFY ENUM ENDIAN  => qw/NONE LE BE/;

OPTIONAL STRINGIFY 
	ENUM MEM_ACCESS => qw/NONE ACQUIRE RELEASE LORELEASE LOACQUIRE 
						  ATOMIC ATOMIC_RELEASE ATOMIC_ACQUIRE UNPRIVILEGED/;

STRINGIFY ENUM DATATYPE => qw/NONE F16 BF16 F32 F64 F80 BCD80 I8 I16 I32 I64 I128 I256 
							  S8 S16 S32 S64 U8 U16 U32 U64 U128 U256 P8 P64 IX SX UX/;
							  
STRINGIFY ENUM ARM_BARRIER => qw/NONE SY ST SYST LD ISH ISHST ISHLD NSH  NSHST NSHLD OSH OSHST OSHLD/;

my @cregs     = ( 'C0' .. 'C9', 'C10' .. 'C15');
my @pregs     = ( 'P0' .. 'P9', 'P10' .. 'P15');

STRINGIFY ENUM ARM_CSPACE =>('NONE', @cregs);
STRINGIFY ENUM ARM_PSPACE =>('NONE', @pregs);


OPTIONAL STRINGIFY ENUM CATEGORY => qw(
ADVSIMD APP ARITHMETIC ATOMIC 
BINARY BITFIELD BITWISE BRANCH BROADCASTING 
CALL CARITHMETIC CARRY COMPARISON COMPLEX CONDITIONALLY CONTROL_FLOW CONVERSION CRYPTO 
DATA_TRANSFER DEBUG DECIMAL DOT_PRODUCT 
EMATH EXCEPTION EXTRACTION 
FAR FLOAT FPSIMD FUSED_OP GENERAL 
HALT HALVING HINT INC_DEC INSERTION 
LOAD LOGICAL LOGICAL_FP 
MASK MATH MIN_MAX MISC 
NEAR NOP OS 
PAC POLYNOMIAL PREFETCH RANDOM RET ROTATE_LEFT ROTATE_RIGHT 
ROUNDING SATURATING SELECTION SET SETCC SHIFT_LEFT SHIFT_RIGHT SHORT 
SIGNED SIGN_EXTEND SIMD STACK_TRANSFER STAT STORE STRING SVE 
SWIZZLE SYSCALL SYSRET SYSTEM TABLE_LOOKUP TAGS 
TRIGONOMETRIC UNCONDITIONALLY UNDEFINED UNSIGNED VAES
);